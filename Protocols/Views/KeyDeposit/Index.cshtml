@using KeyDeposit
@{
    ViewBag.Title = "Депонирование ключей";
}

<script type="text/javascript" src="../../Scripts/KDepositWork.js"></script>

<div class="jumbotron">
    <h1>K-Deposit</h1>
    <p class="lead">
        Депонирование ключей с доверенными лицами.
    </p>
</div>

<div class="bs-callout"
     data-bind="visible: HasResult, css: {'bs-callout-danger': IsResultError, 'bs-callout-success' : !IsResultError() }">
    <h4 data-bind="text: ResultHeader"></h4>
    <p data-bind="html: ResultText"></p>
</div>

<h2>Управление</h2>
<div class="form-horizontal">
    <div class="form-group">
        <label for="ModesContainer" class="col-md-2 control-label">Сторона</label>
        <div id="ModesContainer">
            <div class="col-sm-10">
                <input type="button" class="btn" onclick="setMode('Клиент')" value="Клиент"
                       data-bind="css: {'btn-primary': IsClientMode, 'btn-default' : !IsClientMode() }" />

                <input type="button" class="btn" onclick="setMode('Центр депонирования')" value="Центр депонирования"
                       data-bind="css: {'btn-primary': IsDepositCenterMode, 'btn-default' : !IsDepositCenterMode() }" />
                
                <input type="button" class="btn" onclick="setMode('Доверенные лица')" value="Доверенные лица"
                       data-bind="css: {'btn-primary': IsTrustedCenterMode, 'btn-default' : !IsTrustedCenterMode() }" />
                
                <input type="button" class="btn" onclick="setMode('Государство')" value="Государство"
                       data-bind="css: {'btn-primary': IsStateMode, 'btn-default' : !IsStateMode() }" />                
            </div>
        </div>
    </div>
    
    <div class="bs-callout bs-callout-info" data-bind="visible: IsClientMode">
        <h2>Справка</h2>
        <p>
            Секретный ключ клиента создается в такой последовательности:<br/>
            <ol>
                <li>
                    Сначала генерируется исходные значения P(простое) и G(случайное), каждое по @KDSecret.BytesCount бит<br/>
                    Простое число генерируется проверкой чисел из отрезка (длиной @KDSecret.IntervalLength)
                    с использованием теста простоты Рабина-Миллера со значением уверенности @KDSecret.PrimeCertainty<br/>
                </li>
                <li>
                    На базе P и G вычисляются открытые (PK[i]) и закрытые (SK[i]) ключи для доверенных центров [1..@KDSecret.TrustedCenterCount]<br/>
                    Генерируется случайное SK[i] (длиной @KDSecret.BytesCount бит)<br/>
                    Вычисляется PK[i] = (G ** SK[i]) mod P
                </li>
                <li>
                    Затем собираются открытый и закрытый ключ клиента (из PK[i], SK[i] и P)
                </li>
                <li>
                    Последним отдается открытый ключ центру депонирования (из PK[i] и P)<br />
                    Тот проверяет публичные ключи у доверенных центров (сопоставляя со своим), и разрешает или запрещает пользоваться ими.
                </li>
            </ol>
        </p>
    </div>
    

    <div class="bs-callout bs-callout-info" data-bind="visible: IsDepositCenterMode">
        <h2>Справка</h2>
        <p>Центр депонирования хранит открытые ключи клиентов</p>
    </div>
    
    <div class="bs-callout bs-callout-info" data-bind="visible: IsTrustedCenterMode">
        <h2>Справка</h2>
        <p>Доверенные лица хранят части открытых / закрытых ключей клиента</p>
    </div>
    
    <div class="bs-callout bs-callout-info" data-bind="visible: IsStateMode">
        <h2>Справка</h2>
        <p>
            Госорганы вправе запрашивать у доверенных лиц части ключей и узнавать полный открытый и закрытый ключ клиента<br/>
            Обратите внимание, нужен <b>идентификатор ключа KeyId</b>, а не идентификатор записи<br/>
            KeyId можно получить, нажав на идентификатор записи
        </p>
    </div>

    <div class="form-group" data-bind="visible: IsClientMode">
        <div class="col-md-offset-2 col-sm-10">
            <button class="btn btn-success" onclick="createKey()" data-bind="visible: !Process()">Создать ключ</button>
            <img src="../../Content/Load.gif" style="display: none; width: 27px" alt="<Load>" data-bind="visible: Process" />
        </div>
    </div>
    
    <div class="form-group" data-bind="visible: IsStateMode">
        <label for="KeyId" class="col-md-2 control-label">Идентификатор ключа</label>
        <div class="col-sm-10">
            <input type="text" id="KeyId" class="form-control" placeholder="Введите идентификатор"
                   data-bind="value: KeyId">
        </div>
    </div>

    <div class="form-group" data-bind="visible: IsStateMode">
        <div class="col-md-offset-2 col-sm-10">
            <button class="btn btn-success" onclick="learnTheKey()" data-bind="visible: !Process()">Узнать ключ</button>
            <img src="../../Content/Load.gif" style="display: none; width: 27px" alt="<Load>" data-bind="visible: Process" />
        </div>
    </div>
</div>

<h2>Доступные ключи</h2>
<div class="form-group">
    <img src="../../Content/Load.gif" style="display: none; width: 27px" alt="<Load>" data-bind="visible: LoadingTable" />
    <table id="KeyViewer" class="table table-condensed table-hover" data-bind="visible: !LoadingTable()">
            
    </table>
</div>

<script>
    ko.applyBindings(data);
    setMode("Клиент");
</script>
